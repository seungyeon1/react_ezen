-----------------------07/30 immer start
$ yarn add immer
import {produce} from "immer"; // {} 필수 

리액트에서 기존 자바스크립트 매서드 내장함수 push, slice, find 인지를 못했다.불변성때문에 
근데 immer 라이브러리 사용하게 되면 위에 자바스크립 내장함수 사용 가능하다..! 

immer 사용할때 오히려 concat, filter 같이 쓰게되면 더 비효율적 왜냐 한번더 복사 하는 이유가됨.

immer 라이브러리를 사용하면 구조가 복잡한 객체도 짧은 코드를 사용하여 불변성을 유지하면서 업데이트 해줄 수 있다. 
concat 사용안해도됨. rest함수도 안써도됨.
불변성에 신경 쓰지 않은것처럼 코드를 작성했지만 '불변성 관리를 제대로 해주는 
라이브러리다.'

const nextState = produce(originalState, draft => {
    //바꾸고 싶은 값 바꾸기
    draft.somewhere.deep.inside = 5;
})
draft: 설계 (직역하면 뜻) 키워드 : 상태를 바꾸는 함수를 draft에 적용되어 불변성 유지를 하고
새로운 상태를 리턴 해준다. 

immer 라이브러리 안에 있는 'produce함수'는 두개의 파라미터가 있다.
첫번째 파라미터는 '수정하고 싶은 상태'
두번째 파라미터는 '상태를 어떻게 업데이트 할것인지'에 대한 정의
두번째가 내부에서 원하는 값을 변경하면 produce 함수가 불변성 유지를 대신해 주면서
새로운 상태를 생성해 준다. 


splice : [배열이여야함] index기준으로 함 // 불변성 상관없으니까 
splice(3,1,apple) //3번째 index 하나 제거 하면서 apple 넣어라 

filter : 불변성때문에 index로 기준 잡으면 안됨 , id값으로 하든 다른걸로 하든 


#useState의 함수형 업데이트와 immer함께 사용 하기 : hook + immer
#[]에 업데이트 대신 바로 사용하기 -> 함수형 
ex) 
const [number, setNumber] = useState(0);
//prevNumber는 현재 number 값을 가리킨다.

const onIncrease = useCallback(
    ()=> setNumber(prevNumber => prevNumber + 1), [],
);

ex2)함수형
const update = produce(draft =>{
  draft.value = 2;
});
const originalState ={
  value:1,
  foo:'bar',
};
const nextState = update(originalState);
console.log(nextState); 

produce의 첫번째 파라미터가 '함수형태' 이면 draft =>{
  draft.value = 2;
}) 알아서 업데이트 함수를 반환한다. 그러므로 [] 안에 빈값으로 한다. 



