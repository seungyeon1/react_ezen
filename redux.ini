-----------------------08/13
현재 redux가 개선이 많이 되어서 
Context API 도 같이 사용많이 되고있다.

context : 전역으로 단 한번에 원하는 값을 받아와서 사용할 수 있다. 

Context API v16.3부터 많은 개선이 이루어 졌다. 
Context API를 사용 해 전역 상태 관리 흐름

예시)
기존방식에 사용했던 색상을 props로 받아 오는 것이 아니라 
ColorContext안에 들어있는 Consumer라는 컴포넌트를 통해 색상을 조회 하겠다라는 뜻이다.

<ColorContext.Consumer>
    { 이안에 바로 함수 사용이 가능하다.}
</ColorContext.Consumer>
이러한 패턴을 Function as a cild, Render Props 라고 한다. 

Provider : 변경하는 값 
이걸 사용할꺼면 제대로 사용해야한다. 쓰고 값을 안주면 에러 

#Consumer 대신 Hook 을 사용한다. 
useContext


#redux의 5가지 특징 
'1. 액션' : 상태가 어떠한 변화가 필요하면 액션(action)이란 것을 발생한다.
액션은 하나의 객체로 표현되는데 액션 객체는 아래와 같은 형식으로 이루어져 있다.
{
    type: 'TOGGLE_VALUE',
    data: {
        id :1 ,
        text: '리덕스 배우기'
    }
}
여기서 타입은 액션 이름이다. 

그리고 그 외에 값들을 나중에 상태 업데이트 할 때 참고해야 할 값이며, 개발자가
마음대로 넣을 수 있다. 
{
    type: 'TOGGLE_VALUE',
    data: {
        id :1 ,
        text: '리덕스 배우기'
    }
}
{
    type: 'CHANGE_INPUT',
    text: '안녕하세요'
}

'2. 액션 생성 함수' : 액션 객체를 만들어 주는 함수
function addTodo(data) {
    return {
        type: 'ADD_TODO',
        data
    };
}
//활살표 함수로도 만들 수 있다.
const changeInput = text => ({
    type: 'CHANGE_INPUT',
    text
})

'3.reducer(리듀서)' : reducer: 리액트의 내장 함수 
변화를 일으키는 함수, 액션을 만들어서 발생시키면 리듀서가 현재 상태와
전달받은 액션 객체를 파라미터를 받아온다. 그리고 두 값을 참고하여 새로운 상태를
만들어서 반환해준다. 

const initialState={
  counter:1
};
function reducer(state = initialState, action){
  switch(action.type){
    case INCREMENT:
      return{
        counter:state.counter +1
      };
    default:
      return state;
  }
}

'4. store(스토어) ': reducer의 내장함수이다.
프로젝트에 리덕스를 적용하기 위해 스토어를 만든다. 한개의 프로젝트에는 단 하나의 스토어만 가질 수 있다. 
스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어가 있으며 그 외에도 몇가지 중요한 내장함수를 지닌다. 

'5. dispatch (디스패치)' : store의 내장함수 중 하나이다. 디스패치는 '액션을 발생시키는 것' 이라고 이해하면 된다.
이 함수는 dispatch(action)과 같은 형태로 액션 객체를 파라미터로 넣어서 호출한다.
이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어 준다. 

'6. subscribe(구독)' : store의 내장 함수 중 하나이다.
subscribe 함수 안에 리스너 함수를 파라미터로 넣어서 호출해주면 이 리스터 함수가 액션이 디스패치 되어 상태가
업데이트 될 때마다 호출된다. 

const listener = () =>{
  console.log('상태가 업데이트됨');
}
const unsubscribe = store.subscribe(listener);

unsubscribe();

----------------------------------------------------------------
$ yarn global add parcel-bundler
$ mkdir vanilla-redux
$ cd vanilla-redux
$ yarn add parcel-bundler
$ yarn init -y
$ yarn parcel index.html
$ yarn add redux

# 리덕스 세가지 규칙
1. 단일 스토어
2. 읽기 선용 상태
3. 리듀스 순수한 함수
- 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받는다
- 파라미터 외의 값에는 의존하면 안된다
- 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환한다
- 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 한다.

'cli redux 하기'
$ yarn create react-app redux
$ yarn add redux react-redux //redux , react-redux lib 두개 설치

UI에 관련된 프레젠테이셔널 컴포넌트는 src/components 경로에
리덕스와 연동된 컨테이너 컴포넌트는 src/containers 경로에 저장

modules = 액션타입, 액션 생성함수, 리듀서


import counter from './counter';
import {increase, decrease} from './counter';

import counter, {increase, decrease} from './counter';


리덕스 확장 프로그램 설치 후 
$ yarn add redux-devtools-extension

'*redux 문법..!'
컴포넌트와 리덕스를 연동하려면 react-redux에서 제공하는 'connect 함수를 사용'
connect(mapStateToProps, mapDispatchToProps) (연동할 컴포넌트)
mapStateToProps : 리덕스 스토어 안의 상태를 컴포넌트의 props로 넘겨주기 위해 설정하는 함수
mapDispatchToProps : 액션 생성 함수를 컴포넌트의 props로 넘겨주기 위해 사용하는 함수


const makeContainer = connect(mapStateToProps, mapDispatchToProps)
makeContainer(타깃 컴포넌트)

# redux-actions를 사용하면 액션생성 함수를 더 짧은 형태로 작성할 수 있다.
$ yarn add redux-actions

switch.case -> handleActions 함수로 사용

const MY_ACTION = 'sample/MY_ACTION';
const myAction = createAction(MY_ACTION);
const action= myAction('hello world');
/* 결과
{ type: MY_ACTION, payload: 'hello world'}
*/

액션 생성 함수에서 받아온 파라미터를 그대로 payload에 넣는것이 아니라 변형을 주고 싶다면 createAction함수의 두번째 함수에 payload를 정의하는 함수를 따로 선언해서 넣어주면 된다.
const MY_ACTION = 'sample/MY_ACTION';
const myAction = createAction(MY_ACTION, text => `${text}!`);
const action= myAction('hello world');
/* 결과
{ type: MY_ACTION, payload: 'hello world'}
*/

rest연산자 불변성 사용하지 않기위해 설치
$ yarn add immer 

-------------------------------------08/27

자바는 틀이 없고
spring부트는 틀이있고 spring만의 문법이있다.

#Hooks를 사용하여 컨테이너 컴포넌트 만들기 
connect 함수를 hook으로 만들기 : connect함수를 사용안해도 됨 

const 결과 = useSelector(상태 선택 함수);  

'useDispatch'라는 hook은 컴포넌트 내부에서 스토어의 내장 함수 dispatch를 사용할 수 있게 
해준다. 
컨테이너 컴포넌트에서 액션을 디스패치해야 할때 사용하면 된다. 
const dispatch = useDispatch();
dispatch( { type: 'SAMPLE_ACTION' } );

리랜더링 안되도록 'useCallback 함수 재사용 '사용하기! 최적화 해주기 

const onIncrease = useCallback(() => dispatch(increase(), [dispatch]));
*** [dispatch] 업데이트 하는 이유는
컴포넌트 내부에서 
const dispatch = useDispatch() = (스토어의 내장 함수 dispatch)를 사용해야지 
dispatch 사용할수 있기 때문이다. ***

'useActions'는 원래는 react-redux에 내장된 상태로 릴리즈 될 계획이었으나 
리덕스 개발팀에서 꼭 필요하지 않다고 판단하여 제외된 Hook이다. 
그대신 공식 문서에서 그대로 복사하여 사용할 수 있도록 제공하고 있다. 
https://react-redux.js.org/api/hooks#recipe-useactions
필요하면 직접 hook만들어서 사용해라 라는 뜻
useAction.js 참고


#connect함수와 hook(useSelector, useDispatch) 차이점
connect함수를 사용하여 컨테이너 컴포넌트를 만들었을 경우, 해당 컨테이너 컴포넌트의
부모컴포넌트가 리렌더링 될때 해당 컨테이너 컴포넌트의 props가 바뀌지 않았다면 
리랜더링이 자동으로 방지되어 성능이 최적화 된다. 

반면, hook을 사용하여 리덕스 상태를 조회했을 때는 이 최적화 작업이 자동으로 
이루어지지않으므로 성능 최적화를 위해서는 React.memo를 컨테이너 컴포넌트에 사용해 주어야 한다. 
ex ) export default React.momo(TodosContainer); 


#리덕스 미들웨어를 통한 비동기 작업 관리 
요청이 시작되었을대는 로딩중
요청이 성공하거나 실패했을때는 로딩이 끝났음에 대한 명시가 필요하다
요청이 성공하면 서버에서 받아온 응답에 대한 상태를 관리하고 
요청이 실패하면 서버에서 반환한 에러에 대한 상태를 관리해야 한다. 

리액트 프로젝트에서 리덕스를 사용하고 있으며 이러한 비동기 작업을 관리해야 한다면
'미들웨어(middleware)'를 사용하여 효율적이고 편하게 상태 관리를 할 수 있다.

<middleware> 프로젝트 start
$yarn add redux react-redux redux-actions

#미들웨어
클라인언트와 서버 사이에 '동적' 컨텐츠를 하기 위해서는 대표적으로 was,tomcat를 사용하는데
이를 middleware 라고 한다. 

액션 -> 미들웨어 -> 리듀서 -> 스토어 

'리덕스 미들웨어'는 액션을 디스패치 했을 때 리듀서에서 이를 처리하기에 앞서 
사전에 지정된 작업을 실행한다. 
미들웨어는 액션과 리듀서 사이에 중간자라고 볼 수 있다.

액션이 디스패치 될때마다 액션의 정보와 액션이 디스패치되기 전후의 상태를 콘솔에 보여주는 로깅미들웨어를
작성한다.
const loggerMiddleware = store => next => action => {
  //미들웨어 기본구조 
}
next : 미들웨어 
const loggerMiddleware = function loggerMiddleware(store){ //store : 리덕스 스토어의 인스턴스
  return function(next){
    return function(action) { //action: 디스패치된 액션
      //미들웨어 기본 구조
    }
  }
}


'예시 : 앱 켰을때 로딩화면 이 미들웨어 '

https://react.vlpt.us/redux-middleware/03-logger-and-devtools.html

#redux-logger 미들웨어 생성 lib 
$yarn add redux-logger //오픈소스 lib사용 

미들웨어에서는 여러 종류의 작업을 처리할수 있다. 특정 조건에 따라 (내가주는 조건) 액션을
무시하게 할수도 있고, 특정 조건에 따라 액션 정보를 가로채서 변경한 후 리듀서에 
전달해줄수도 있고 아니면 특정 액션에 기반하여 새로운 액션을 여러번 디스패치할수도 있다. 
이러한 미들웨어 속성을 사용하여 네트워크 요청과 같은 비동기 작업을 관리하면 
유용하게 사용할수 있다. 

#비동기 작업을 처리하는 미들웨어 (가장 많이 사용 한다. 리덕스 공식메뉴얼에서도 나옴)
$yarn add redux-thunk 

'redux-thunk' : '비동기 작업'을 처리할 때 가장 많이 사용하는 '미들웨어'이다. 
객체가 아닌 '함수형태의 액션을 디스패치할 수' 있게 해준다. 
thunk는 특정 작업을 나중에 할 수 있도록 미루기 위해 '함수 형태'로 감싼 것을 의미한다.
thunk_counter.js참고 

const addOne = x => x+1;
addOne(1);
function addOneThunk(x) {
  const thunk = ()=>addOne(x);
  return thunk;
}

//화살표 함수로 하면 
//const addOneThunk = x => () => addOne(x); 

const fn = addOneThunk(1);
setTimeout(()=> {
  const value = fn();
  console.log(value);
},1000);


redux-thunk 이용하면 thunk함수를 만들어서 디스패치 할수 있다. 
그러면 리덕스 미들웨어가 그 함수를 전달받아 store의 dispatch와 getState를 파라미터로 넣어서 호출해준다.
예를 들면
const sampleThunk = () => (dispatch, getState) => {
  //현재 상태를 참조할 수 있고,
  //새 액션을 디스패치할 수 도 있다. 
}


#axios 비동기
$yarn add axios

https://jsonplaceholder.typicode.com/
에서 더미 받아오기 


//리덕스 문법! 
//액션값, 디스패치 연결 connect 
export default connect(
  //액션값
  ({ sample }) => ({
    post: sample.post,
    users: sample.users,
    loadingPost: sample.loading.GET_POST,
    loadingUsers: sample.loading.GET_USERS,
  }),
  //디스패치
  {
    getPost,
    getUsers,
  }
)(SampleContainer);

------------------------------------- 09/03 (마지막날)

메모제이션(memoiztion): 이전에 계산된 값을 저장해 두었다가 나중에 동일한 입력에 대한 중복 계산을 방지하고 성능을
최적화하는 방법, 함수나 계산 비용이 큰 연산을 수행할때 사용
--> 함수 재사용이랑 같다. 

React에서는 memoiztion는 useMemo와 useCallback 훅을 사용하여 
함수나 값의 결과를 이전에 계산된 결과로 저장하고 해당 값이 변경되지 않는 한 
이전 결과를 사용하는것을 의미한다. 이렇게 함으로써 동일한 계산을 중복으로 수행하지 않아
성능을 향상시킬수 있다. 

const memoizedCallback = useCallback( () => performOperation(a,b), [a,b]);

middleware프로젝트 리팩토링 하기
createRequestThunk.js, loading.js 참고 

'redux-thunk' 추가설명
'redux-thunk'는 함수 형태의 액션을 디스패치하여 미들웨어에서 해당 함수에 스토어의 dispatch와 getState를 파라미터로
넣어서 사용하는 원리. 그래서 구현한 thunk함수 내부에서 원하는 api요청도 하고 다른 액션을 디스패치하거나 현재 상태를
조회하기도 할 수 있다. 

'redux-saga' : '비동기 작업' 관련 '미들웨어'
$yarn add redux-saga
middleware>modules>thunk_counter.js 참고 

- 기존 요청을 취소 처리해야 할 때 (불필요한 중복 요청 방지)
- 특정 액션이 발생했을 때 다른 액션을 발생시키거나, API 요청 등 리덕스와 관계없는 코드를 실행할 때 
- 웹 소켓을 사용할 때
- API 요청 실패시 재요청해야 할 때 

es6의 제너레이터(generator)함수 
- 함수를 특정 구간에서 멈춰 놓을 수 있고. 원할때 다시 돌아가게 할 수도 있다. 

'*': 제너레이터 함수 문법 특징 
'yield' : return 같은 개념 반환값 
function* generatorFunction(){
    console.log('hello');
    yield 1;
    console.log('generator function');
    yield 2;
    console.log('function');
    yield 3;
    return 4;
}
const generator = generatorFunction();
generator.next()

function* sumGenerator(){
console.log('sumGer가 만들어졌다');
let a = yield;
let b = yield;    
yield a+b;
}
const sum = sumGenerator();
sum.next()
sum.next(2)
sum.next(3)

saga가 제너레이터처럼 사용된다.

