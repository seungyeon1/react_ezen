-----------------------08/13
현재 redux가 개선이 많이 되어서 
Context API 도 같이 사용많이 되고있다.

context : 전역으로 단 한번에 원하는 값을 받아와서 사용할 수 있다. 

Context API v16.3부터 많은 개선이 이루어 졌다. 
Context API를 사용 해 전역 상태 관리 흐름

예시)
기존방식에 사용했던 색상을 props로 받아 오는 것이 아니라 
ColorContext안에 들어있는 Consumer라는 컴포넌트를 통해 색상을 조회 하겠다라는 뜻이다.

<ColorContext.Consumer>
    { 이안에 바로 함수 사용이 가능하다.}
</ColorContext.Consumer>
이러한 패턴을 Function as a cild, Render Props 라고 한다. 

Provider : 변경하는 값 
이걸 사용할꺼면 제대로 사용해야한다. 쓰고 값을 안주면 에러 

#Consumer 대신 Hook 을 사용한다. 
useContext


#redux의 5가지 특징 
'1. 액션' : 상태가 어떠한 변화가 필요하면 액션(action)이란 것을 발생한다.
액션은 하나의 객체로 표현되는데 액션 객체는 아래와 같은 형식으로 이루어져 있다.
{
    type: 'TOGGLE_VALUE',
    data: {
        id :1 ,
        text: '리덕스 배우기'
    }
}
여기서 타입은 액션 이름이다. 

그리고 그 외에 값들을 나중에 상태 업데이트 할 때 참고해야 할 값이며, 개발자가
마음대로 넣을 수 있다. 
{
    type: 'TOGGLE_VALUE',
    data: {
        id :1 ,
        text: '리덕스 배우기'
    }
}
{
    type: 'CHANGE_INPUT',
    text: '안녕하세요'
}

'2. 액션 생성 함수' : 액션 객체를 만들어 주는 함수
function addTodo(data) {
    return {
        type: 'ADD_TODO',
        data
    };
}
//활살표 함수로도 만들 수 있다.
const changeInput = text => ({
    type: 'CHANGE_INPUT',
    text
})

'3.reducer(리듀서)' : reducer: 리액트의 내장 함수 
변화를 일으키는 함수, 액션을 만들어서 발생시키면 리듀서가 현재 상태와
전달받은 액션 객체를 파라미터를 받아온다. 그리고 두 값을 참고하여 새로운 상태를
만들어서 반환해준다. 

const initialState={
  counter:1
};
function reducer(state = initialState, action){
  switch(action.type){
    case INCREMENT:
      return{
        counter:state.counter +1
      };
    default:
      return state;
  }
}

'4. store(스토어) ': reducer의 내장함수이다.
프로젝트에 리덕스를 적용하기 위해 스토어를 만든다. 한개의 프로젝트에는 단 하나의 스토어만 가질 수 있다. 
스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어가 있으며 그 외에도 몇가지 중요한 내장함수를 지닌다. 

'5. dispatch (디스패치)' : store의 내장함수 중 하나이다. 디스패치는 '액션을 발생시키는 것' 이라고 이해하면 된다.
이 함수는 dispatch(action)과 같은 형태로 액션 객체를 파라미터로 넣어서 호출한다.
이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어 준다. 

'6. subscribe(구독)' : store의 내장 함수 중 하나이다.
subscribe 함수 안에 리스너 함수를 파라미터로 넣어서 호출해주면 이 리스터 함수가 액션이 디스패치 되어 상태가
업데이트 될 때마다 호출된다. 